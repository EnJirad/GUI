local Xlib = {}

function Xlib:MakeWindow(config)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = config.Name or "XlibScreenGui"
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, 400, 0, 350)
    MainFrame.Position = UDim2.new(0.5, -200, 0.5, -175)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Active = true
    MainFrame.Draggable = true
    MainFrame.Parent = ScreenGui

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = MainFrame

    local TitleBar = Instance.new("Frame")
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(1, -60, 1, 0)
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.Text = config.Name or "Xlib UI"
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 18
    TitleLabel.Parent = TitleBar

    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Size = UDim2.new(0, 20, 0, 20)
    MinimizeButton.Position = UDim2.new(1, -55, 0, 5)
    MinimizeButton.Text = "<"
    MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    MinimizeButton.Parent = TitleBar

    local CloseButton = Instance.new("TextButton")
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Position = UDim2.new(1, -30, 0, 5)
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    CloseButton.Parent = TitleBar

    local TabFrame = Instance.new("Frame")
    TabFrame.Size = UDim2.new(0, 100, 1, -30)
    TabFrame.Position = UDim2.new(0, 0, 0, 30)
    TabFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    TabFrame.BorderSizePixel = 0
    TabFrame.Parent = MainFrame

    local ContentFrame = Instance.new("Frame")
    ContentFrame.Size = UDim2.new(1, -100, 1, -30)
    ContentFrame.Position = UDim2.new(0, 100, 0, 30)
    ContentFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    ContentFrame.BorderSizePixel = 0
    ContentFrame.Parent = MainFrame

    -- Create minimized icon
    local MinimizedIcon = Instance.new("TextButton")
    MinimizedIcon.Size = UDim2.new(0, 50, 0, 50)
    MinimizedIcon.Position = UDim2.new(0, 10, 0, 10)
    MinimizedIcon.Text = config.Name or "Xlib"
    MinimizedIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
    MinimizedIcon.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MinimizedIcon.Visible = false
    MinimizedIcon.Parent = ScreenGui

    -- Function to minimize the window
    local function minimizeWindow()
        MainFrame.Visible = false
        MinimizedIcon.Visible = true
    end

    -- Function to restore the window
    local function restoreWindow()
        MainFrame.Visible = true
        MinimizedIcon.Visible = false
    end

    -- Function to close the window
    local function closeWindow()
        ScreenGui:Destroy()
    end

    MinimizeButton.MouseButton1Click:Connect(minimizeWindow)
    MinimizedIcon.MouseButton1Click:Connect(restoreWindow)
    CloseButton.MouseButton1Click:Connect(closeWindow)

    -- Make the minimized icon draggable
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        MinimizedIcon.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    MinimizedIcon.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MinimizedIcon.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    MinimizedIcon.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    return {
        MainFrame = MainFrame,
        TabFrame = TabFrame,
        ContentFrame = ContentFrame,
    }
end

function Xlib:MakeTab(config)
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(1, 0, 0, 30)
    TabButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    TabButton.Text = config.Name
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.Font = Enum.Font.Gotham
    TabButton.TextSize = 14

    -- Calculate the position of the new tab
    local index = #config.Parent.TabFrame:GetChildren()
    TabButton.Position = UDim2.new(0, 0, 0, index * 30)
    TabButton.Parent = config.Parent.TabFrame

    local ToggleContainer = Instance.new("Frame")
    ToggleContainer.Size = UDim2.new(1, 0, 1, 0)
    ToggleContainer.BackgroundTransparency = 1
    ToggleContainer.Parent = config.Parent.ContentFrame
    ToggleContainer.Visible = false

    -- Function to switch between tabs
    TabButton.MouseButton1Click:Connect(function()
        for _, child in pairs(config.Parent.ContentFrame:GetChildren()) do
            if child:IsA("Frame") then
                child.Visible = false
            end
        end
        ToggleContainer.Visible = true
    end)

    return {
        TabButton = TabButton,
        ToggleContainer = ToggleContainer
    }
end

function Xlib:MakeDropdown(config)
    local Dropdown = Instance.new("Frame")
    Dropdown.Size = UDim2.new(1, -20, 0, 30)
    Dropdown.Position = UDim2.new(0, 10, 0, (#config.Parent.ToggleContainer:GetChildren()) * 40)
    Dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    Dropdown.Parent = config.Parent.ToggleContainer

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 5)
    UICorner.Parent = Dropdown

    local DropdownButton = Instance.new("TextButton")
    DropdownButton.Size = UDim2.new(0, 200, 0, 30)
    DropdownButton.Position = UDim2.new(0, 0, 0, 0)
    DropdownButton.Text = config.Name
    DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    DropdownButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    DropdownButton.Parent = Dropdown

    local OptionsFrame = Instance.new("Frame")
    OptionsFrame.Size = UDim2.new(1, 0, 0, #config.Options * 30)
    OptionsFrame.Position = UDim2.new(0, 0, 1, 0)
    OptionsFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    OptionsFrame.Visible = false
    OptionsFrame.Parent = Dropdown

    -- Function to toggle options visibility
    local function toggleOptions()
    OptionsFrame.Visible = not OptionsFrame.Visible
    if OptionsFrame.Visible then
        -- Move other tabs down
        local dropdownIndex = Dropdown:GetAttribute("DropdownIndex") or 0
        for _, child in pairs(config.Parent.ToggleContainer:GetChildren()) do
            if child:IsA("Frame") and child.Position.Y.Offset > Dropdown.Position.Y.Offset then
                local startPos = child.Position.Y.Offset
                local newYOffset = startPos + OptionsFrame.AbsoluteSize.Y
                child.Position = UDim2.new(0, 10, 0, newYOffset)
            end
        end
    else
        -- Move other tabs up
        local dropdownIndex = Dropdown:GetAttribute("DropdownIndex") or 0
        for _, child in pairs(config.Parent.ToggleContainer:GetChildren()) do
            if child:IsA("Frame") and child.Position.Y.Offset > Dropdown.Position.Y.Offset then
                local startPos = child.Position.Y.Offset
                local newYOffset = startPos - OptionsFrame.AbsoluteSize.Y
                child.Position = UDim2.new(0, 10, 0, newYOffset)
            end
        end
    end
end

local function selectOption(option)
    DropdownButton.Text = option
    toggleOptions()
    OptionsFrame.Visible = false
end

DropdownButton.MouseButton1Click:Connect(toggleOptions)

local yOffset = 30
for index, option in ipairs(config.Options) do
    local OptionButton = Instance.new("TextButton")
    OptionButton.Size = UDim2.new(1, 0, 0, 30)
    OptionButton.Position = UDim2.new(0, 0, 0, yOffset + (index - 1) * 30)
    OptionButton.Text = option
    OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    OptionButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    OptionButton.Parent = OptionsFrame

    OptionButton.MouseButton1Click:Connect(function()
        selectOption(option)
    end)
end

Dropdown:GetPropertyChangedSignal("Size"):Connect(function()
    DropdownButton.Size = Dropdown.Size
end)

Dropdown:GetPropertyChangedSignal("Position"):Connect(function()
    DropdownButton.Position = Dropdown.Position
end)

DropdownButton:GetPropertyChangedSignal("Size"):Connect(function()
    Dropdown.Size = UDim2.new(0, DropdownButton.Size.X.Offset, 0, 30)
    OptionsFrame.Position = UDim2.new(0, 0, 1, 0)
end)

DropdownButton.MouseEnter:Connect(function()
    DropdownButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
end)

DropdownButton.MouseLeave:Connect(function()
    DropdownButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
end)

DropdownButton.TextScaled = true
DropdownButton.TextWrapped = true

Dropdown.MouseLeave:Connect(function()
    OptionsFrame.Visible = false
end)

Dropdown:SetAttribute("DropdownIndex", #config.Parent.ToggleContainer:GetChildren())

return {
    DropdownButton = DropdownButton,
    OptionsFrame = OptionsFrame,
}
end

function Xlib:MakeToggle(config)
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(1, 0, 0, 30)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    ToggleButton.Text = config.Name
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Font = Enum.Font.Gotham
    ToggleButton.TextSize = 14
    ToggleButton.Parent = config.Parent.ToggleContainer

    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Size = UDim2.new(1, 0, 1, 0)
    ToggleFrame.BackgroundTransparency = 1
    ToggleFrame.Parent = config.Parent.ContentFrame

    ToggleButton.MouseButton1Click:Connect(function()
        config.Callback(ToggleButton.Text, not ToggleButton.Text, ToggleButton)
    end)

    return {
        ToggleButton = ToggleButton,
        ToggleFrame = ToggleFrame
    }
end

return Xlib
